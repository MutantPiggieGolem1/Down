#!/usr/bin/bash
set -o errexit -o pipefail -o noclobber -o nounset

# === Argument Parsing & Checks ===

getopt --test > /dev/null && true # ignore errexit with `&& true`
if [[ $? -ne 4 ]]; then
    echo "Argument Parse Error."
    exit 1
fi

# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
# -if getopt fails, it complains itself to stdout
PARSED=$(getopt --options=n:o:has --longoptions=output:,help --name "$0" -- "$@") || exit 2
eval set -- "$PARSED"

LIMIT=25
OUTPUT="./media"
ADDITIVE=false
SUBTRACTIVE=false

while true; do
    case "$1" in
        -h|--help)
            printf "down - YT Playlist Downloader & Metadata Extractor [version 1.0.0]

Usage:\tdown <url> [options]

Command options:
  -a              \tAdditive, downloads
  -s              \tSubtractive, deletes
  -o, --output dir\tset final file destination
  -n n            \tset number of songs to attempt downloading
  -h, --help      \tprints this message.

Default options: -n 25 -o ./media"
            exit 0
            ;;
        -o|--output)
            OUTPUT="$2"
            shift 2
            ;;
        -n)
            LIMIT="$2"
            shift 2
            ;;
        -a)
            ADDITIVE=true
            shift 1
            ;;
        -s)
            SUBTRACTIVE=true
            shift 1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Argument Parse Error."
            exit 3
            ;;
    esac
done

if [[ $# -ne 1 ]] || [[ -z $1 ]]; then
    echo "Playlist URL Required."
    exit 4
fi

if ! [ -w "$OUTPUT" ]; then
    echo "Output directory missing or unwritable."
    exit 4
fi

if ! [ -w "$(pwd)" ]; then
    echo "Working directory unwritable."
    exit 4
fi

PLAYLISTURL=$1
OUTPUT=${OUTPUT%"/"}

if (! command -v jq &> /dev/null) || (! command -v yt-dlp &> /dev/null) || (! command -v aria2c &> /dev/null); then
    echo "Missing Dependencies. Please run ./installdeps/$OSTYPE.sh"
    exit 1
fi

if ! $ADDITIVE && ! $SUBTRACTIVE; then
    echo "No operations selected. Try --help."
    exit 1
fi

# === Operation ===

printf "Fetching Info.."

# shellcheck disable=SC2207
PLAYLISTITEMS=($(yt-dlp --flat-playlist --dump-single-json "$PLAYLISTURL" | jq -cr '.entries | map(.id) | join(" ")'))

if $ADDITIVE; then
    PLAYLISTLEN=${#PLAYLISTITEMS[@]}

    for i in "${!PLAYLISTITEMS[@]}"; do
        if [ "$i" -gt "$LIMIT" ]; then break; fi
        id=${PLAYLISTITEMS[i]}
        dfile="./inprog/$id.description"
        afile="$id.m4a"

        if ! [ -f "$OUTPUT/$afile" ]; then
            if ! [ -f "$dfile" ] || ! [ -f "./inprog/$afile" ]; then
                yt-dlp -f "m4a/bestaudio" "https://www.youtube.com/watch?v=$id" --no-warnings -q --progress \
                    --add-metadata --write-description -o "./inprog/%(id)s.%(ext)s" \
                    --external-downloader aria2c --external-downloader-args '--max-connection-per-server=16' \
                    -x --audio-quality 0 --audio-format m4a
            fi
            description="$(cat "$dfile")"
            if [[ $description == *"Auto-generated by YouTube." ]]; then
                # shellcheck disable=SC2207
                res=($(python extractinfo.py "$dfile")) # split by spaces
                if (( ${#res[@]} != 0 )); then # if not empty (i.e. parse success)
                    rm "$dfile"
                    printf "\r\033[KWriting info for %s\n" "$afile"
                    (
                        ffmpeg -i "./inprog/$afile" -hide_banner -loglevel warning \
                            -metadata "date=${res[0]}" -metadata "year=${res[1]}" \
                            -c copy -y "$OUTPUT/$afile" &&
                        rm "./inprog/$afile"
                    ) &
                else
                    printf "\r\033[KFailed to extract info from %s\n" "$dfile"
                fi
            else
                printf "\r\033[KCouldn't parse info from %s\n" "$dfile"
            fi
        else
            if [ -f "$dfile" ]; then rm "$dfile"; fi
            if [ -f "./inprog/$afile" ]; then rm "./inprog/$afile"; fi
        fi
        printf "\r\033[KDownloading [%s/%s (%s%%)].." "$((i+1))" "$PLAYLISTLEN" "$((100*(i+1)/PLAYLISTLEN))"
    done
    printf "\r\033[KDownloading Complete!\n"
fi

if $SUBTRACTIVE; then
    DIRITEMS=("$OUTPUT"/*.m4a)
    DIRLEN=${#DIRITEMS[@]}

    for i in "${!DIRITEMS[@]}"; do
        item=${DIRITEMS[i]}
        if ! [ -f "$item" ]; then continue; fi
        id=$(basename "$item")
        id="${id##*/}"
        id="${id%.*}"

        # shellcheck disable=SC2076
        if [[ ! " ${PLAYLISTITEMS[*]} " =~ " ${id} " ]]; then
            rm "$item"
            printf "\r\033[KDeleting %s.m4a\n" "$id"
        fi
        printf "\r\033[KScanning [%s/%s (%s%%)].." "$((i+1))" "$DIRLEN" "$((100*(i+1)/DIRLEN))"
    done
    printf "\r\033[KScanning Complete!\n"
fi