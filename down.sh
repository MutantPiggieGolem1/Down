#!/usr/bin/bash

PLAYLISTURL=$1
BATCHSIZE=5

if (! command -v jq &> /dev/null) || (! command -v yt-dlp &> /dev/null) || (! command -v aria2c &> /dev/null); then
    echo "Missing Dependencies. Please run installdeps.sh"
    exit 1
fi

echo "Fetching Info.."

PLAYLISTLEN="$(yt-dlp --flat-playlist --dump-single-json "$PLAYLISTURL" | jq '.entries | length' )"

echo "Downloading [0/$PLAYLISTLEN (0%)].."

if ! [ -d media ]; then
    mkdir media
fi

for ((c = 1; c <= PLAYLISTLEN ; c+=BATCHSIZE )); do
    yt-dlp -f "m4a/bestaudio" "$PLAYLISTURL" -c --no-warnings -q --progress \
        --playlist-start $c --playlist-end "$((c+BATCHSIZE-1))" --download-archive "./inprog/archive.txt" \
        --add-metadata --write-description -o "./inprog/%(id)s.%(ext)s" \
        --external-downloader aria2c --external-downloader-args '--max-connection-per-server=16' \
        -x --audio-quality 0 --audio-format m4a
    for dfile in ./inprog/*.description; do
        afile="$(basename "$dfile" .description).m4a"
        if ! [ -f "./inprog/$afile" ]; then # If the associated audio file is no longer present (i.e. info already written)
            rm "$dfile"
            continue
        fi
        description="$(cat "$dfile")"
        if [[ $description == *"Auto-generated by YouTube." ]]; then
            # shellcheck disable=SC2207
            res=($(python extractinfo.py "$dfile")) # split by spaces
            if (( ${#res[@]} != 0 )); then # if not empty (i.e. parse success)
                rm "$dfile"
                echo "Writing info for $afile"
                ffmpeg -i "./inprog/$afile" -hide_banner -loglevel warning \
                    -metadata "date=${res[0]}" -metadata "year=${res[1]}" \
                -c copy -y "./media/$afile"
                rm "./inprog/$afile"
                continue;
            else
                echo "Failed to extract info from $dfile"
            fi
        else
            echo "Couldn't parse info from $dfile"
        fi
        mv "$dfile" "$dfile.old"
    done
    read -r -p "Downloading [$((c+BATCHSIZE-1))/$PLAYLISTLEN ($((100*(c+BATCHSIZE-1)/PLAYLISTLEN))%)].."; #wait for input
done